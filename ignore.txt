// ignore it

// ContentView

struct ContentView : View {

@State var chatMessages : [ChatMessage] = []
@State var messageText: String = ""
var body : some View {

VStack{
ScrollView{
LazyVStack{
ForEach(chatMessages, id: \.id){ message in
messageView(message)
          }
}
}
HStack{
TextField("Ask ChatGPT", text: $messageText).padding().cornerRadius(19)
Button{
sendMessage()
} label: {
Text("Ask")
        }
      }

}.padding()
// to show messages with colors
func messageView(_ message: ChatMesssage) -> some View {
if message.sender == .me { Spacer() }
if message.sender == .gpt { Spacer() }
Text(message.content).padding().cornerRadius(11).background(message.sender==.me ? .pink : .gray).foregroundColor(message.sender==.me ? .blue : .violet)
                                                        }
    }
func sendMessage(){
messageText = ""
print(messageText)
}
                      }

// formation of each message
struct ChatMessage {
let id : String
let content : String
let dateCreated : Date
let sender : MessageSenger
}
// message by me or response by ChatGPT
enum MessageSenger{
me
gpt
}


// Constants
// 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
import Foundation

enum Constants{
static let openAIAPIKey = "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"
}


// AIService.swift
import Foundation
import Alamofire
import Combine

class AIService{
let baseUrl = "https://api.openai.com/v1/completions"

func sendMesssage(message: String) -> AnyPublisher(OpenAICompletionsResponse, Error) {

let body = OpenAICompletionsBody(model: "text-davinci-003", prompt: message, temperature: 0.75)

let headers: HTTPHeaders = [
"Authorization": "Bearer \(Constants.openAIAPIKey)"
]
return Future{ [weak,self] promise in 
guard let self = self else {return }

AF.request(self.baseUrl + "completions", method: .post, parameters: body, encoder: .json, headers: headers).responseDecodable(of: OpenAICompletionsResponse.self){ response in

switch response.result{
case .success(let result):
}

}
}
}
